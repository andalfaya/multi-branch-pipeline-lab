name: CI/CD Build and Deploy

on:
  push:
    branches: [ "dev", "staging", "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/simple-app
  ENVIRONMENT: ${{ github.ref_name }}

jobs:
  # Job 1: Build and Test
  build:
    name: 🔨 Build & Test
    runs-on: self-hosted
    outputs:
      image-tag: ${{ env.ENVIRONMENT }}
      image-name: ${{ env.IMAGE_NAME }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔍 Validate Dockerfile
        run: |
          echo "✅ Validating Dockerfile..."
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "❌ Dockerfile not found!"
            exit 1
          fi
          # Validate Dockerfile syntax using hadolint (if available) or basic checks
          echo "📋 Dockerfile found and readable"
          echo "🔍 Basic validation completed"
        shell: bash

      - name: 📦 Build Docker image
        run: |
          echo "🔨 Building image for environment: $ENVIRONMENT"
          docker build -t $IMAGE_NAME:$ENVIRONMENT .
        shell: bash

  # Job 2: Push to Registry
  push:
    name: 🚀 Push to Registry
    runs-on: self-hosted
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Build and push Docker image
        run: |
          echo "🚀 Building and pushing image: $IMAGE_NAME:$ENVIRONMENT"
          docker build -t $IMAGE_NAME:$ENVIRONMENT .
          docker push $IMAGE_NAME:$ENVIRONMENT
        shell: bash

  # Job 3: Update Manifests
  update-manifests:
    name: 📝 Update K8s Manifests
    runs-on: self-hosted
    needs: push
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: 📝 Update deployment manifests
        run: |
          echo "📝 Updating manifests for environment: $ENVIRONMENT"
          DEPLOY_FILE="k8s/deployment.yaml"
          # Check if deployment file exists
          if [ ! -f "$DEPLOY_FILE" ]; then
            echo "❌ Deployment file not found at: $DEPLOY_FILE"
            exit 1
          fi
          # Detect OS type for sed compatibility
          if [[ "$OSTYPE" == "darwin"* ]]; then
            SED_CMD="sed -i ''"
          else
            SED_CMD="sed -i"
          fi
          echo "🔧 Updating image reference..."
          $SED_CMD "s|image: .*|image: $IMAGE_NAME:$ENVIRONMENT|" "$DEPLOY_FILE"
          echo "🔧 Updating environment variable..."
          $SED_CMD "s|value: \".*\"|value: \"$ENVIRONMENT\"|" "$DEPLOY_FILE"
          echo "✅ Manifests successfully updated for environment: $ENVIRONMENT"
        shell: bash

      - name: 💾 Commit manifest updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            git commit -m "🚀 Update manifests for $ENVIRONMENT environment - $IMAGE_NAME:$ENVIRONMENT"
            git push origin $ENVIRONMENT
          fi
        shell: bash

  # Job 4: Deploy to Kubernetes
  deploy:
    name: 🚀 Deploy to K8s
    runs-on: self-hosted
    needs: update-manifests
    if: github.ref_name != 'main'
    environment: ${{ github.ref_name }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
      - name: 🚀 Deploy to Kubernetes
        run: |
          echo "🚀 Deploying to $ENVIRONMENT environment..."
          kubectl apply -f k8s/deployment.yaml -n $ENVIRONMENT
          kubectl apply -f k8s/service.yaml -n $ENVIRONMENT
          echo "✅ Deployment completed for $ENVIRONMENT!"
        shell: bash

      - name: 📊 Check deployment status
        run: |
          echo "📊 Checking deployment status..."
          kubectl get pods -n $ENVIRONMENT
          kubectl get services -n $ENVIRONMENT
        shell: bash

